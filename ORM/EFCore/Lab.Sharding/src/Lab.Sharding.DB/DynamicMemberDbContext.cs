using Lab.Sharding.DB;
using Lab.Sharding.DB.AutoGenerated.Entities;
using Microsoft.EntityFrameworkCore;

public class DynamicMemberDbContext : DynamicDbContext
{
	public string TablePostfix { get; }
	public string ConnectionString { get; }

	public DbSet<Member> Members { get; set; }

	public DynamicMemberDbContext(string connectionString, string tablePostfix)
	{
		this.ConnectionString = connectionString;
		this.TablePostfix = tablePostfix;
	}
	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	{
		optionsBuilder.UseSqlServer(this.ConnectionString);
	}

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Member>(entity =>
		{
			entity.HasKey(e => e.Id).HasName($"Member{this.TablePostfix}_pk");
			entity.ToTable($"Member{this.TablePostfix}");

			entity.Property(e => e.Id)
				.HasMaxLength(50)
				.IsUnicode(false);
			entity.Property(e => e.ChangedBy).HasMaxLength(20);
			entity.Property(e => e.CreatedBy).HasMaxLength(50);
			entity.Property(e => e.Email)
				.HasMaxLength(50)
				.IsUnicode(false);
			entity.Property(e => e.Name).HasMaxLength(20);
			entity.Property(e => e.SequenceId).ValueGeneratedOnAdd();
		});
	}
}
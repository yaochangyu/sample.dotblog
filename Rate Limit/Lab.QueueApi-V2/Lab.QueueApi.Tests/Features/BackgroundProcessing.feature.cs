// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Lab.QueueApi.Tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class 背景處理機制Feature : object, global::Xunit.IClassFixture<背景處理機制Feature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "背景處理機制", "    作為一個系統管理員\r\n    我希望系統能夠自動處理請求池中的請求\r\n    以便確保請求得到適時處理和清理", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BackgroundProcessing.feature"
#line hidden
        
        public 背景處理機制Feature(背景處理機制Feature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
    #line hidden
#line 7
        await testRunner.GivenAsync("系統速率限制為每分鐘 2 個請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
        await testRunner.AndAsync("背景處理服務正在運行", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/BackgroundProcessing.feature", 8);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="背景服務處理池中的請求")]
        [global::Xunit.TraitAttribute("FeatureTitle", "背景處理機制")]
        [global::Xunit.TraitAttribute("Description", "背景服務處理池中的請求")]
        public async global::System.Threading.Tasks.Task 背景服務處理池中的請求()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("背景服務處理池中的請求", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 10
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 11
        await testRunner.GivenAsync("請求池中有 3 個等待的請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
        await testRunner.AndAsync("系統當前沒有處理中的請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
        await testRunner.WhenAsync("背景服務檢查處理機會", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
        await testRunner.ThenAsync("應該從池中取得第一個請求進行處理", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 15
        await testRunner.AndAsync("該請求狀態應該變為 \"Processing\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
        await testRunner.AndAsync("池中剩餘請求數量應該減少 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="背景服務在系統忙碌時等待")]
        [global::Xunit.TraitAttribute("FeatureTitle", "背景處理機制")]
        [global::Xunit.TraitAttribute("Description", "背景服務在系統忙碌時等待")]
        public async global::System.Threading.Tasks.Task 背景服務在系統忙碌時等待()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("背景服務在系統忙碌時等待", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 18
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 19
        await testRunner.GivenAsync("請求池中有 2 個等待的請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
        await testRunner.AndAsync("系統已有 2 個請求在處理中", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
        await testRunner.WhenAsync("背景服務檢查處理機會", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
        await testRunner.ThenAsync("不應該處理任何池中的請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
        await testRunner.AndAsync("所有池中請求應該保持 \"Pending\" 狀態", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="自動清理超時請求")]
        [global::Xunit.TraitAttribute("FeatureTitle", "背景處理機制")]
        [global::Xunit.TraitAttribute("Description", "自動清理超時請求")]
        public async global::System.Threading.Tasks.Task 自動清理超時請求()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("自動清理超時請求", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 25
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 26
        await testRunner.GivenAsync("請求池中有一個創建於 2 分鐘前的請求 \"timeout-request\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
        await testRunner.WhenAsync("背景服務執行清理作業", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
        await testRunner.ThenAsync("Request ID \"timeout-request\" 狀態應該變為 \"UnProcessed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
        await testRunner.AndAsync("Request ID \"timeout-request\" 應該從池中移除", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="保留未超時的請求")]
        [global::Xunit.TraitAttribute("FeatureTitle", "背景處理機制")]
        [global::Xunit.TraitAttribute("Description", "保留未超時的請求")]
        public async global::System.Threading.Tasks.Task 保留未超時的請求()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("保留未超時的請求", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 31
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 32
        await testRunner.GivenAsync("請求池中有一個創建於 30 秒前的請求 \"recent-request\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
        await testRunner.WhenAsync("背景服務執行清理作業", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
        await testRunner.ThenAsync("Request ID \"recent-request\" 狀態應該保持 \"Pending\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
        await testRunner.AndAsync("Request ID \"recent-request\" 應該仍在池中", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="批量清理多個超時請求")]
        [global::Xunit.TraitAttribute("FeatureTitle", "背景處理機制")]
        [global::Xunit.TraitAttribute("Description", "批量清理多個超時請求")]
        public async global::System.Threading.Tasks.Task 批量清理多個超時請求()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("批量清理多個超時請求", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 37
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 38
        await testRunner.GivenAsync("請求池中有 5 個創建於 2 分鐘前的請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
        await testRunner.WhenAsync("背景服務執行清理作業", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
        await testRunner.ThenAsync("所有 5 個請求狀態應該變為 \"UnProcessed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
        await testRunner.AndAsync("所有 5 個請求應該從池中移除", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
        await testRunner.AndAsync("系統記憶體應該被釋放", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="背景服務定期執行清理")]
        [global::Xunit.TraitAttribute("FeatureTitle", "背景處理機制")]
        [global::Xunit.TraitAttribute("Description", "背景服務定期執行清理")]
        public async global::System.Threading.Tasks.Task 背景服務定期執行清理()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("背景服務定期執行清理", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 44
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 45
        await testRunner.GivenAsync("背景服務已運行 30 秒", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 46
        await testRunner.WhenAsync("系統時間達到下一個清理週期", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
        await testRunner.ThenAsync("背景服務應該自動執行清理作業", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 48
        await testRunner.AndAsync("清理作業應該檢查所有池中請求的超時狀態", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await 背景處理機制Feature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await 背景處理機制Feature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion

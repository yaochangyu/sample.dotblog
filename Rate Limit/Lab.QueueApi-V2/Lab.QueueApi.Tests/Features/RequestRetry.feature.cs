// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Lab.QueueApi.Tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class 請求重試機制Feature : object, global::Xunit.IClassFixture<請求重試機制Feature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "請求重試機制", "    作為一個 API 使用者\r\n    我希望能夠使用 Request ID 重試處理\r\n    以便獲得之前提交的請求處理結果", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RequestRetry.feature"
#line hidden
        
        public 請求重試機制Feature(請求重試機制Feature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
    #line hidden
#line 7
        await testRunner.GivenAsync("系統速率限制為每分鐘 2 個請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
        await testRunner.AndAsync("請求池中有一些等待的請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/RequestRetry.feature", 6);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="使用有效 Request ID 重試成功")]
        [global::Xunit.TraitAttribute("FeatureTitle", "請求重試機制")]
        [global::Xunit.TraitAttribute("Description", "使用有效 Request ID 重試成功")]
        public async global::System.Threading.Tasks.Task 使用有效RequestID重試成功()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("使用有效 Request ID 重試成功", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 10
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 11
        await testRunner.GivenAsync("請求池中存在 Request ID \"valid-request-id\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
        await testRunner.AndAsync("該請求狀態為 \"Pending\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
        await testRunner.AndAsync("系統可以處理新請求", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
        await testRunner.WhenAsync("我使用 Request ID \"valid-request-id\" 進行重試", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
        await testRunner.ThenAsync("請求應該被處理", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
        await testRunner.AndAsync("回應狀態碼應該是 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
        await testRunner.AndAsync("回應內容應包含處理結果", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
        await testRunner.AndAsync("Request ID \"valid-request-id\" 應該從池中移除", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="使用無效 Request ID 重試失敗")]
        [global::Xunit.TraitAttribute("FeatureTitle", "請求重試機制")]
        [global::Xunit.TraitAttribute("Description", "使用無效 Request ID 重試失敗")]
        public async global::System.Threading.Tasks.Task 使用無效RequestID重試失敗()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("使用無效 Request ID 重試失敗", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 20
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 21
        await testRunner.GivenAsync("請求池中不存在 Request ID \"invalid-request-id\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
        await testRunner.WhenAsync("我使用 Request ID \"invalid-request-id\" 進行重試", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
        await testRunner.ThenAsync("回應狀態碼應該是 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
        await testRunner.AndAsync("回應應包含 \"Request ID not found\" 訊息", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="重試已完成的請求")]
        [global::Xunit.TraitAttribute("FeatureTitle", "請求重試機制")]
        [global::Xunit.TraitAttribute("Description", "重試已完成的請求")]
        public async global::System.Threading.Tasks.Task 重試已完成的請求()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("重試已完成的請求", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 26
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 27
        await testRunner.GivenAsync("系統中存在已完成的請求 \"completed-request-id\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
        await testRunner.WhenAsync("我使用 Request ID \"completed-request-id\" 進行重試", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
        await testRunner.ThenAsync("回應狀態碼應該是 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
        await testRunner.AndAsync("回應內容應包含之前的處理結果", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="重試仍在等待中的請求（系統忙碌）")]
        [global::Xunit.TraitAttribute("FeatureTitle", "請求重試機制")]
        [global::Xunit.TraitAttribute("Description", "重試仍在等待中的請求（系統忙碌）")]
        public async global::System.Threading.Tasks.Task 重試仍在等待中的請求系統忙碌()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("重試仍在等待中的請求（系統忙碌）", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 32
    this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
    await this.FeatureBackgroundAsync();
#line hidden
#line 33
        await testRunner.GivenAsync("請求池中存在 Request ID \"waiting-request-id\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
        await testRunner.AndAsync("系統已達到處理限制", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
        await testRunner.WhenAsync("我使用 Request ID \"waiting-request-id\" 進行重試", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 36
        await testRunner.ThenAsync("回應狀態碼應該是 429", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 37
        await testRunner.AndAsync("回應應包含 \"Still pending\" 訊息", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await 請求重試機制Feature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await 請求重試機制Feature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion

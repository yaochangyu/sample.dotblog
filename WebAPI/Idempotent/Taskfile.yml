# Taskfile.yml

version: "3"

dotenv: [ "secrets/secrets.env" ]

tasks:
  ## Develop ---------------------------------------------------
  dev-init:
    desc: Init development environment
    cmds:
      - task: redis-start
      - task: db-start
      - task: db-update
      - task: db-mssql-start
      - task: s3-minio-start
      - task: ddb-start
      - task: ddb-init
      - task: mock-membership


  dev-stop:
    desc: Stop development environment
    cmds:
      - docker-compose down

  api-dev:
    desc: WebApi Development
    dir: "src/NineYi.Msa.MemberService.WebAPI"
    cmds:
      - dotnet watch run --local {{.CLI_ARGS}} | jq -rR '. as $line | try (fromjson | "\(._ts) | \(._lvl) | \(._hid)-\(._ver) | \(._srctx)",  ._msg, ._props) catch $line'

  dm-dev:
    desc: DataMigration Development. Usage => task dm-dev -- diff -s 2001-01-01 -e 2022-01-01
    dir: "src/NineYi.Msa.MemberService.DataMigration.ConsoleApp"
    cmds:
      - dotnet watch run {{.CLI_ARGS}} --local true | jq -rR '. as $line | try (fromjson | "\(._ts) | \(._lvl) | \(._hid)-\(._ver) | \(._srctx)",  ._msg, ._props) catch $line'

  dm-run:
    desc: DataMigration run. Usage => task dm-run -- diff -s 2001-01-01 -e 2022-01-01
    dir: "src/NineYi.Msa.MemberService.DataMigration.ConsoleApp"
    cmds:
      - dotnet run {{.CLI_ARGS}} --local true

  db-start:
    desc: start PostgreSQL at local
    cmds:
      - docker-compose up -d --remove-orphans db

  db-update:
    desc: apply db migration on local PostgreSQL
    cmds:
      - dotnet ef database update {{.CLI_ARGS}} --project src/NineYi.Msa.MemberService.Infrastructure.DB --context MemberDbContext

  redis-start:
    desc: start redis 5.X version
    cmds:
      - docker-compose up -d redis

  redis-admin-start:
    desc: admin ui to manage redis
    cmds:
      - docker-compose up -d redis-admin

  db-otm-db-start:
    dir: test/NineYi.Msa.MemberService.NMQ3.Worker.Infrastructure.Tests
    cmds:
      - docker run --privileged -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=pass@w0rd1~' -p 1433:1433 -d datagrip/mssql-server-linux

  db-otm-db-update:
    dir: test/NineYi.Msa.MemberService.NMQ3.Worker.Infrastructure.Tests
    cmds:
      - dotnet build
      - dotnet ef database update --context CrmDbContext --no-build
      - dotnet ef database update --context WebStoreDbContext --no-build

  db-mssql-start:
    desc: start MSSQL at local
    cmds:
      - docker-compose up -d db-sql

  db-mssql-update:
    desc: db update on local MSSQL
    dir: src/NineYi.Msa.MemberService.DataMigration.Infrastructure
    cmds:
      - dotnet build
      - dotnet ef database update --context CrmDbContext --no-build
      - dotnet ef database update --context WebStoreDbContext --no-build

  db-list-migrations:
    desc: member-service list migrations
    cmds:
      - dotnet ef migrations list {{.CLI_ARGS}} -p src/NineYi.Msa.MemberService.Infrastructure.DB --context MemberDbContext

  db-add-migration:
    desc: member-service add migration
    cmds:
      - dotnet ef migrations add {{.CLI_ARGS}} -p src/NineYi.Msa.MemberService.Infrastructure.DB --context MemberDbContext

  db-remove-migration:
    desc: member-service remove migration
    cmds:
      - dotnet ef migrations remove -p src/NineYi.Msa.MemberService.Infrastructure.DB --context MemberDbContext

  db-script:
    desc: generate member-service db script
    cmds:
      - dotnet ef migrations script 0 -p src/NineYi.Msa.MemberService.Infrastructure.DB --context MemberDbContext

  ddb-start:
    desc: start dynamodb at local
    cmds:
      - docker-compose up -d ddb

  ddb-clear:
    desc: clear ddb table
    cmds:
      - docker-compose restart ddb
      - aws dynamodb create-table --endpoint-url http://localhost:8000 --cli-input-json file://./ddb.json

  ddb-init:
    desc: init dynamodb table at local
    cmds:
      - aws dynamodb create-table --endpoint-url http://localhost:8000 --cli-input-json file://./ddb.json

  ddb-list:
    desc: list dynamodb tables at local
    cmds:
      - aws dynamodb list-tables --endpoint-url http://localhost:8000

  ddb-logs:
    cmds:
      - docker-compose logs -f ddb

  ddb-admin-start:
    desc: start dynamodb admin
    cmds:
      - docker-compose up -d ddb-admin
      
  s3-minio-start:
    desc: start s3-minio at local
    cmds:
      - docker-compose up -d s3-minio
      
  gen-k8s:
    desc: generate k8s
    cmds:
      - dotnet run --project src/NineYi.Msa.K8S.Template.GeneratorApp -- -s $(pwd)/env -d $(pwd)/env/k8s -v 1.0.0.1

  gen-configs-k8s:
    desc: generate env config and k8s
    cmds:
      - task: gen-configs
      - dotnet run --project src/NineYi.Msa.K8S.Template.GeneratorApp -- -s $(pwd)/env -d $(pwd)/env/k8s -v 1.0.0.1
      
  gen-configs:
    desc: Generate configs
    dir: "env"
    cmds:
      - nu -c 'rm -f *.env'
      - task: _gen-config
        vars: { MARKET: "TW", ENV: "DEV" }
      - task: _gen-config
        vars: { MARKET: "TW", ENV: "QA" }
      - task: _gen-config
        vars: { MARKET: "TW", ENV: "STRESS" }
      - task: _gen-config
        vars: { MARKET: "PX", ENV: "QA" }
      - task: _gen-config
        vars: { MARKET: "HK", ENV: "QA" }
      - task: _gen-config
        vars: { MARKET: "MY", ENV: "QA" }
      - task: _gen-config
        vars: { MARKET: "TW", ENV: "PROD" }
      - task: _gen-config
        vars: { MARKET: "PX", ENV: "PROD" }
      - task: _gen-config
        vars: { MARKET: "HK", ENV: "PROD" }
      - task: _gen-config
        vars: { MARKET: "MY", ENV: "PROD" }

  _gen-config:
    dir: "env"
    cmds:
      - echo "## This file was generated by task gen-configs" > WebApi_{{.MARKET}}_{{.ENV}}.env
      - echo >> WebApi_{{.MARKET}}_{{.ENV}}.env
      - opc -i market={{.MARKET}} -i env={{.ENV}} -m WebApi.rego -f env-file >> WebApi_{{.MARKET}}_{{.ENV}}.env
  
  login-am:
    desc: login am with envs $AM_USER_NAME $AM_USER_PASSWD
    cmds:
      - docker login docker.build.91app.io -u $AM_USER_NAME -p $AM_USER_PASSWD

  build-image:
    desc: usage => task build-image -- 0.1.2
    vars:
      VER:
        sh: echo "{{.CLI_ARGS}}-$(git rev-parse --short HEAD)"
    cmds:
      - docker build --build-arg VER={{.VER}} . -t docker.build.91app.io/member-service:{{.VER}}

  push-image:
    desc: usage => task build-image -- 0.1.2
    vars:
      VER:
        sh: echo "{{.CLI_ARGS}}-$(git rev-parse --short HEAD)"
    cmds:
      - docker push docker.build.91app.io/member-service:{{.VER}}

  build-dm-image:
    desc: usage => task build-dm-image -- 0.1.2
    vars:
      VER:
        sh: echo "{{.CLI_ARGS}}-$(git rev-parse --short HEAD)"
    cmds:
      - docker build --build-arg VER={{.VER}} . -t docker.build.91app.io/member-service-data-migration:{{.VER}} -f Dockerfile.DataMigration

  push-dm-image:
    desc: usage => task build-dm-image -- 0.1.2
    vars:
      VER:
        sh: echo "{{.CLI_ARGS}}-$(git rev-parse --short HEAD)"
    cmds:
      - docker push docker.build.91app.io/member-service-data-migration:{{.VER}}

  build-and-push-image:
    desc: usage => task build-and-push-image -- 0.1.2
    vars:
      VER:
        sh: echo "{{.CLI_ARGS}}-$(git rev-parse --short HEAD)"
    cmds:
      - docker build --build-arg VER={{.VER}} . -t docker.build.91app.io/member-service:{{.VER}}
      - docker build --build-arg VER={{.VER}} . -t docker.build.91app.io/member-service-data-migration:{{.VER}} -f Dockerfile.DataMigration
      - docker push docker.build.91app.io/member-service-data-migration:{{.VER}}
      - docker push docker.build.91app.io/member-service:{{.VER}}
  
  deploy:
    desc: usage => task MARKET=TW ENV=QA VER=0.13.8 KUBE_CONFIG=$KUBE_CONFIG_EKS_TW_QA deploy
    vars:
      TS:
        #sh: TZ=":Asia/Taipei" date +"%Y%m%d%H%M"
        sh: nu -c 'date to-timezone "Asia/Taipei" | date format "%Y%m%d%H%M"' 
      FULL_VER:
        sh: echo "{{.VER}}-$(git rev-parse --short HEAD)"
      WORKDIR:
        sh: echo "deployments/{{.MARKET}}-{{.ENV}}-{{.FULL_VER}}-{{.TS}}"
    silent: true
    preconditions:
      - sh: "[ ! -z {{.MARKET}} ]"
        msg: "MARKET(TW/PX/HK/MY) was required."
      - sh: "[ ! -z {{.ENV}} ]"
        msg: "ENV(QA/Prod) was required."
      - sh: "[ ! -z {{.VER}} ]"
        msg: "VER(ex: 1.2.0) was required."
      - sh: "[ ! -z {{.KUBE_CONFIG}} ]"
        msg: "KUBE_CONFIG(...) was required."
    cmds:
      - echo MARKET={{.MARKET}}
      - echo ENV={{.ENV}}
      - echo VER={{.VER}}
      - echo WORKDIR={{.WORKDIR}}
      - nu -c 'mkdir -s {{.WORKDIR}}'
      - nu -c 'echo {{.KUBE_CONFIG}} | hash base64 --decode' > {{.WORKDIR}}/kube_config
      - echo {{.FULL_VER}}
      - dotnet run --project src/NineYi.Msa.K8S.Template.GeneratorApp -- -s $(pwd)/env -d $(pwd)/{{.WORKDIR}} -v {{.FULL_VER}}
      #      - echo ----------debug----------------
      #      - cat {{.WORKDIR}}/kube_config
      #      - cat {{.WORKDIR}}/config-map.yaml
      #      - cat {{.WORKDIR}}/webapi-deployment-map.yaml
      - kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/{{.MARKET}}-{{.ENV}}-ConfigMap.yaml
      - kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/{{.MARKET}}-{{.ENV}}-Deployment.yaml
  
  deploy2:
    desc: usage => task MARKET=TW ENV=QA VER=0.15.1-c86783fe KUBE_CONFIG=$KUBE_CONFIG_EKS_TW_QA deploy2
    vars:
      TS:
        sh: nu -c 'date to-timezone "Asia/Taipei" | date format "%Y%m%d%H%M"'
      WORKDIR:
        sh: echo "deployments/{{.MARKET}}-{{.ENV}}-{{.VER}}-{{.TS}}"
    silent: true
    preconditions:
      - sh: "[ ! -z {{.MARKET}} ]"
        msg: "MARKET(TW/PX/HK/MY) was required."
      - sh: "[ ! -z {{.ENV}} ]"
        msg: "ENV(QA/Prod) was required."
      - sh: "[ ! -z {{.VER}} ]"
        msg: "VER(ex: 0.15.1-c86783fe) was required."
    cmds:
      - |
        echo MARKET={{.MARKET}}
        echo ENV={{.ENV}}
        echo VER={{.VER}}
        echo WORKDIR={{.WORKDIR}}
        mkdir -p {{.WORKDIR}}
        cat env/WebApi_{{.MARKET}}_{{.ENV}}.env | grep -v '^#\|^_\|^K8S_' | grep '\S' | sed -e 's/^/K8S_CM_/' > {{.WORKDIR}}/env_file
        cat env/WebApi_{{.MARKET}}_{{.ENV}}.env | grep '^K8S_' | grep '\S' >> {{.WORKDIR}}/env_file
        set -a; source {{.WORKDIR}}/env_file; set +a;
        export K8S_COMMON_IMAGE_VERSION={{.VER}};
        cat pipeline/templates/config-maps.yaml.gpl | gomplate > {{.WORKDIR}}/config-map.yaml
        cat pipeline/templates/webapi-deployment.yaml.gpl | gomplate > {{.WORKDIR}}/webapi-deployment.yaml
        cat pipeline/templates/dm-sync-daily-deployment.yaml.gpl | gomplate > {{.WORKDIR}}/dm-sync-daily-deployment.yaml
        cat pipeline/templates/dm-shop-daily-deployment.yaml.gpl | gomplate > {{.WORKDIR}}/dm-shop-daily-deployment.yaml
        cat pipeline/templates/dm-sync-deployment.yaml.gpl | gomplate > {{.WORKDIR}}/dm-sync-deployment.yaml
        cat pipeline/templates/dm-shop-deployment.yaml.gpl | gomplate > {{.WORKDIR}}/dm-shop-deployment.yaml
        
        if [ ! -z {{.KUBE_CONFIG}} ]; then
          echo {{.KUBE_CONFIG}} | base64 -d > {{.WORKDIR}}/kube_config
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/config-map.yaml
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/webapi-deployment.yaml
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/dm-sync-daily-deployment.yaml
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/dm-shop-daily-deployment.yaml
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/dm-sync-deployment.yaml
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/dm-shop-deployment.yaml
        fi

  deploy-admin-tools:
    desc: usage => task MARKET=TW ENV=QA KUBE_CONFIG=$KUBE_CONFIG_EKS_TW_QA deploy-admin-tools
    vars:
      TS:
        sh: nu -c 'date to-timezone "Asia/Taipei" | date format "%Y%m%d%H%M"'
      WORKDIR:
        sh: echo "deployments/admin-tools-{{.MARKET}}-{{.ENV}}-{{.TS}}"
    silent: true
    preconditions:
      - sh: "[ ! -z {{.MARKET}} ]"
        msg: "MARKET(TW/PX/HK/MY) was required."
      - sh: "[ ! -z {{.ENV}} ]"
        msg: "ENV(QA/Prod) was required."
    cmds:
      - |
        echo MARKET={{.MARKET}}
        echo ENV={{.ENV}}
        echo WORKDIR={{.WORKDIR}}
        mkdir -p {{.WORKDIR}}
        cat env/WebApi_{{.MARKET}}_{{.ENV}}.env | grep -v '^#\|^_\|^K8S_' | grep '\S' | sed -e 's/^/K8S_CM_/' > {{.WORKDIR}}/env_file
        cat env/WebApi_{{.MARKET}}_{{.ENV}}.env | grep '^K8S_' | grep '\S' >> {{.WORKDIR}}/env_file
        set -a; source {{.WORKDIR}}/env_file; set +a;
        cat pipeline/templates/pg-vacuum-daily-deployment.yaml.gpl | gomplate > {{.WORKDIR}}/pg-vacuum-daily-deployment.yaml
        
        if [ ! -z {{.KUBE_CONFIG}} ]; then
          echo {{.KUBE_CONFIG}} | base64 -d > {{.WORKDIR}}/kube_config
          kubectl apply --kubeconfig {{.WORKDIR}}/kube_config -f {{.WORKDIR}}/pg-vacuum-daily-deployment.yaml
        fi

  auto-test:
    cmds:
      - echo curl -X POST -F token=$AUTOTEST_CI_TRIGGER_TOKEN -F "ref=master" -F "variables\[TYPE\]=qa-test" -F "variables\[SITE\]=erp" -F "variables\[PROJECT\]=member_service" -F "variables\[CI_COMMIT_TAG\]={{.CLI_ARGS}}" https://gitlab.91app.com/api/v4/projects/2831/trigger/pipeline
      - curl -X POST -F token=$AUTOTEST_CI_TRIGGER_TOKEN -F "ref=master" -F "variables\[TYPE\]=qa-test" -F "variables\[SITE\]=erp" -F "variables\[PROJECT\]=member_service" -F "variables\[CI_COMMIT_TAG\]={{.CLI_ARGS}}" https://gitlab.91app.com/api/v4/projects/2831/trigger/pipeline

  ef-codegen-webstoredb:
    desc: EF Core 反向工程產生 WebStoreDbContext EF Entities
    dir: "src/NineYi.Msa.MemberService.Infrastructure.DB"
    cmds:
      - dotnet ef dbcontext scaffold "$WEBSTORE_DB_CONN_STR" Microsoft.EntityFrameworkCore.SqlServer -o AutoGenerated/WebStore -t MemberInfo -t VipMember -t Shop -t VipMemberInfo -t Member -c WebStoreDbContext -n NineYi.Msa.MemberService.Infrastructure.DB.WebStore --force --no-onconfiguring --use-database-names
  
  ef-codegen-crmdb:
    desc: EF Core 反向工程產生 CrmDbContext EF Entities
    dir: "src/NineYi.Msa.MemberService.Infrastructure.DB"
    cmds:
      - dotnet ef dbcontext scaffold "$CRM_DB_CONN_STR" Microsoft.EntityFrameworkCore.SqlServer -o AutoGenerated/CRM -t CrmMember -t CrmMemberInfo -t CrmMemberCustomField -c CrmDbContext -n NineYi.Msa.MemberService.Infrastructure.DB.CRM --force --no-onconfiguring --use-database-names

  doc-codegen-all:
    desc: 透過更新外部 swagger，並根據 swagger 來 codegen 所有 client 及 server
    cmds:
      - task: update-membership-swagger
      #- task: doc-codegen-membership-client
      - task: doc-codegen-client
      - task: doc-codegen-server
      - task: doc-codegen-testing-member-service-client
  
  doc-codegen-client:
    desc: 透過 swagger 來產生 WebAPI 的 csharp httpclient code
    cmds:
      - nswag openapi2csclient /input:docs/swagger-private.yaml /classname:{controller}MemberClient /namespace:NineYi.Msa.MemberService.Infrastructure.Adapter /output:src/NineYi.Msa.MemberService.Infrastructure.Adapter/AutoGenerated/MemberClient.cs /jsonLibrary:SystemTextJson /generateClientInterfaces:true /exposeJsonSerializerSettings:false /useBaseUrl:false /GenerateOptionalPropertiesAsNullable:true
  
  doc-codegen-server:
    desc: 透過 swagger 來產生 WebAPI 的 csharp server code
    dir: "src/NineYi.Msa.OpenApiCodeGen"
    cmds:
      - dotnet run ../../docs/swagger-private.yaml ../NineYi.Msa.MemberService.WebAPI/AutoGenerated/Controller.cs NineYi.Msa.MemberService.WebAPI.Controllers
  
  doc-codegen-testing-member-service-client:
    desc: 透過 swagger 來產生 WebAPI 的 csharp testing httpclient code
    cmds:
      - nswag openapi2csclient /input:docs/swagger-private.yaml /classname:{controller}MemberServiceClient /namespace:NineYi.Msa.MemberService.WebAPI.IntegrationTest.Testing /output:test/NineYi.Msa.MemberService.WebAPI.IntegrationTest/AutoGenerated/MemberServiceClient.cs /jsonLibrary:SystemTextJson /generateClientInterfaces:true /exposeJsonSerializerSettings:false /useBaseUrl:false /ClientBaseClass:MemberServiceClientBase /UseHttpRequestMessageCreationMethod:true /wrapResponses:true /GenerateOptionalPropertiesAsNullable:true /excludedParameterNames:ny-market,ny-shop-id,ny-user-id,ny-service-cert,ny-api-scopes,ny-trace-id,ny-idempotency-key
  
  update-membership-swagger:
    desc: 從 Membership QA 抓取 swagger 文件
    cmds:
      - curl -sL https://membership-internal.qa.91dev.tw/swagger/v1/swagger.json -o docs/external/membership/swagger.json

  doc-codegen-membership-client:
    desc: 從本地的 Membership Swagger 文件產生 Membership httpclient
    cmds:
      - nswag openapi2csclient /input:docs/external/membership/swagger.json /classname:{controller}MemberShipClient /namespace:NineYi.Msa.MemberService.SupportingSubdomain.MemberShip /output:src/NineYi.Msa.MemberService.SupportingSubdomain/MemberShip/AutoGenerated/MemberShipClient.cs /jsonLibrary:SystemTextJson /generateClientInterfaces:true /exposeJsonSerializerSettings:false /useBaseUrl:false /ClientBaseClass:MemberShipClientBase /UseHttpRequestMessageCreationMethod:true /wrapResponses:true /GenerateOptionalPropertiesAsNullable:true /excludedParameterNames:X-API-KEY,NY-SHOP-ID
  
  mock-membership:
    dir: "docs/external/membership"
    cmds:
      - imposter up -p 8100
  
  stop-mock-membership:
    dir: "docs/external/membership"
    cmds:
      - imposter down
  
  doc-codegen-contract:
    desc: 透過 swagger 來產生 contract
    dir: "src/NineYi.Msa.OpenApiCodeGen"
    cmds:
      - dotnet run ../../docs/swagger-private.yaml ../NineYi.Msa.MemberService.Contract/AutoGenerated/Contracts.cs NineYi.Msa.MemberService.Contract

  push-api-doc:
    desc: 將 api-doc 放至 AM
    dir: "docs"
    vars:
      VER: "latest"
    cmds:
      # 用 zip 指令有發生檔案 upload 然後 download 下來後 unzip 失敗，出現 Bad CRC 的 Error，改用 7z 就一切正常了
      - cd public; 7z a apidoc.zip ./apidoc
      - cd internal; 7z a apidoc.zip ./apidoc
      #      - cd public; zip -r ./apidoc.zip ./apidoc
      #      - cd internal; zip -r ./apidoc.zip ./apidoc
      - curl -v -u ${AM_USER}:${AM_PASSWORD} --upload-file ./public/apidoc/swagger.yaml https://entry.build.91app.io/repository/nineyi-develop-raw-hosted/Member_Service/{{.VER}}/swagger.yaml
      - curl -v -u ${AM_USER}:${AM_PASSWORD} --upload-file ./internal/apidoc/swagger.yaml https://entry.build.91app.io/repository/nineyi-develop-raw-hosted/Member_Service/{{.VER}}/swagger-internal.yaml
      - curl -v -u ${AM_USER}:${AM_PASSWORD} --upload-file ./public/apidoc.zip https://entry.build.91app.io/repository/nineyi-develop-raw-hosted/Member_Service/{{.VER}}/apidoc-{{.VER}}.zip
      - curl -v -u ${AM_USER}:${AM_PASSWORD} --upload-file ./internal/apidoc.zip https://entry.build.91app.io/repository/nineyi-develop-raw-hosted/Member_Service/{{.VER}}/apidoc-internal-{{.VER}}.zip
      - rm ./public/apidoc.zip
      - rm ./internal/apidoc.zip
  
  deploy-api-doc:
    desc: 將觸發 api-doc 的 CD 流程
    dir: "docs"
    vars:
      VER: "latest"
    cmds:
      - curl -X POST -F token=$API_DOC_CD_TOKEN -F ref="develop"  -F "variables[SERVICE_NAME]=Member_Service" -F "variables[SERVICE_ID]=Member_Service" https://gitlab.91app.com/api/v4/projects/2682/trigger/pipeline
  
  run-dots:
    desc: 在本地執行 dots
    cmds:
      - nu -c 'docker run --rm -it -w /workdir -v /var/run/docker.sock:/var/run/docker.sock -v $"($env.PWD):/workdir:rw" docker.build.91app.io/dots ash'
  
  redo-nmq-task:
    desc: 重新執行 NMQ Task，usage => task Market=TW Env=QA JobName=MemberServiceSyncWorker redo-nmq-task
    cmds:
      - task: nmq-task
        vars: { Method: Redo }
  
  delete-nmq-task:
    desc: 刪除執行 NMQ Task，usage => task Market=TW Env=QA JobName=MemberServiceSyncWorker delete-nmq-task
    cmds:
      - task: nmq-task
        vars: { Method: Delete }
        
  nmq-task:
    desc: 執行 NMQ Task，usage => task Method=Redo Market=TW Env=QA JobName=MemberServiceSyncWorker nmq-task
    cmds:
      - dotnet run --project src/NineYi.Msa.NMQ3TaskApp -- {{.Method}} -m {{.Market}} -p {{.Env}} -j {{.JobName}}
      
  dm-diff:
    desc: 執行 DataMigration.DiffReport，usage => task dm-diff -- -s C:\\source.csv
    dir: "src/NineYi.Msa.MemberService.DataMigration.DiffReport.ConsoleApp"
    cmds:
      - dotnet run -- {{.CLI_ARGS}}
  